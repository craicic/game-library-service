{"ast":null,"code":"import { UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\nimport { CreatorRoleEnum } from '../../../model/enum/creator-role.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../creator.service\";\nimport * as i2 from \"../creator-data.service\";\nimport * as i3 from \"../../../shared/services/country-data.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"../../../shared/components/contact-form/contact-form.component\";\nimport * as i8 from \"../../../shared/pipes/enum-to-value.pipe\";\nfunction CreatorEditComponent_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 19)(1, \"span\");\n    i0.ɵɵtext(2, \"Cet auteur existe d\\u00E9j\\u00E0 en base de donn\\u00E9es\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction CreatorEditComponent_option_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 20);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"enumToValue\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const role_r5 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"value\", role_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind2(2, 2, role_r5, ctx_r1.actualEnumType), \" \");\n  }\n}\nfunction CreatorEditComponent_app_contact_form_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-contact-form\", 21);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"contactForm\", ctx_r2.contactForm);\n  }\n}\nfunction CreatorEditComponent_button_28_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function CreatorEditComponent_button_28_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.onAddContactForm());\n    });\n    i0.ɵɵtext(1, \"Ajouter les coordonn\\u00E9es \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreatorEditComponent_button_29_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function CreatorEditComponent_button_29_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.onRemoveContactForm());\n    });\n    i0.ɵɵtext(1, \"Retirer les coordonn\\u00E9es \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let CreatorEditComponent = /*#__PURE__*/(() => {\n  class CreatorEditComponent {\n    constructor(creatorsService, creatorsDataService, countryDataService, route, router) {\n      this.creatorsService = creatorsService;\n      this.creatorsDataService = creatorsDataService;\n      this.countryDataService = countryDataService;\n      this.route = route;\n      this.router = router;\n      this.namesExistValidator = control => {\n        const names = this.creatorsService.getExistingNames();\n        const currentFirstName = control.get('firstName').value.toLowerCase().trim();\n        const currentLastName = control.get('lastName').value.toLowerCase().trim();\n        for (const person of names) {\n          if (currentFirstName === person.firstName && currentLastName === person.lastName) {\n            return {\n              namesExist: true\n            };\n          }\n        }\n        return null;\n      };\n      this.namesExistEditModeValidator = control => {\n        let names = this.creatorsService.getExistingNames();\n        const currentFirstName = control.get('firstName').value.toLowerCase().trim();\n        const currentLastName = control.get('lastName').value.toLowerCase().trim();\n        const editedFirstName = this.creatorsService.getCreatorById(this.id).firstName.toLowerCase().trim();\n        const editedLastName = this.creatorsService.getCreatorById(this.id).lastName.toLowerCase().trim();\n        names = names.filter(person => !(person.firstName === editedFirstName && person.lastName === editedLastName));\n        for (const person of names) {\n          if (currentFirstName === person.firstName && currentLastName === person.lastName) {\n            return {\n              namesExist: true\n            };\n          }\n        }\n        return null;\n      };\n    }\n    ngOnInit() {\n      this.hasContact = false;\n      this.populateRoles();\n      this.subscription = this.route.params.subscribe(params => {\n        const id = 'id';\n        this.id = +params[id];\n        if (params[id]) {\n          this.editMode = true;\n        } else {\n          this.editMode = false;\n        }\n        this.initFrom();\n      });\n    }\n    onAddContactForm() {\n      this.hasContact = true;\n      this.creatorForm.addControl('contact', this.contactForm);\n    }\n    onRemoveContactForm() {\n      this.hasContact = false;\n      this.creatorForm.removeControl('contact');\n    }\n    onSubmit() {\n      const creator = this.creatorForm.value;\n      if (this.editMode) {\n        const storedCreator = this.creatorsService.getCreatorById(this.id);\n        if (storedCreator && storedCreator.contact) {\n          creator.contact.id = storedCreator.contact.id;\n        }\n        this.creatorsDataService.editCreator(this.id, creator);\n      } else {\n        this.creatorsDataService.addCreator(creator, this.hasContact);\n      }\n      this.onCancel();\n    }\n    onCancel() {\n      this.router.navigate(['../'], {\n        relativeTo: this.route\n      });\n    }\n    initFrom() {\n      let firstname = '';\n      let lastname = '';\n      let role = 'AUTHOR';\n      let postalCode = '';\n      let street = '';\n      let city = '';\n      let country = '';\n      let streetNumber = '';\n      let phoneNumber = '';\n      let website = '';\n      let mailAddress = '';\n      if (this.editMode) {\n        const creator = this.creatorsService.getCreatorById(this.id);\n        firstname = creator.firstName;\n        lastname = creator.lastName;\n        role = creator.role;\n        if (creator.contact) {\n          this.hasContact = true;\n          postalCode = creator.contact.postalCode;\n          street = creator.contact.street;\n          city = creator.contact.city;\n          country = creator.contact.country;\n          streetNumber = creator.contact.streetNumber;\n          phoneNumber = creator.contact.phoneNumber;\n          website = creator.contact.website;\n          mailAddress = creator.contact.mailAddress;\n        }\n        let firstnamePlaceholder = firstname;\n        if (firstname) {\n          firstnamePlaceholder = firstname + ' ';\n        }\n        this.label = 'Édition de l\\'auteur \\\"' + firstnamePlaceholder + lastname + '\\\"';\n      } else {\n        this.label = 'Création d\\'un auteur';\n      }\n      this.contactForm = new UntypedFormGroup({\n        'postalCode': new UntypedFormControl(postalCode, [Validators.maxLength(50)]),\n        'street': new UntypedFormControl(street, [Validators.maxLength(255)]),\n        'city': new UntypedFormControl(city, [Validators.maxLength(50)]),\n        'country': new UntypedFormControl(country, [Validators.required, Validators.maxLength(50)]),\n        'streetNumber': new UntypedFormControl(streetNumber, [Validators.maxLength(10)]),\n        'phoneNumber': new UntypedFormControl(phoneNumber, [Validators.maxLength(50)]),\n        'website': new UntypedFormControl(website, [Validators.maxLength(75)]),\n        'mailAddress': new UntypedFormControl(mailAddress, [Validators.maxLength(320)])\n      });\n      this.creatorForm = new UntypedFormGroup({\n        'firstName': new UntypedFormControl(firstname, [Validators.maxLength(50)]),\n        'lastName': new UntypedFormControl(lastname, [Validators.required, Validators.maxLength(50)]),\n        'role': new UntypedFormControl(role, [Validators.required, Validators.maxLength(50)])\n      }, !this.editMode ? {\n        validators: this.namesExistValidator\n      } : {\n        validators: this.namesExistEditModeValidator\n      });\n      if (this.hasContact) {\n        this.creatorForm.addControl('contact', this.contactForm);\n      }\n    }\n    populateRoles() {\n      this.rolesList = Object.keys(CreatorRoleEnum);\n      this.actualEnumType = CreatorRoleEnum;\n    }\n  }\n  CreatorEditComponent.ɵfac = function CreatorEditComponent_Factory(t) {\n    return new (t || CreatorEditComponent)(i0.ɵɵdirectiveInject(i1.CreatorService), i0.ɵɵdirectiveInject(i2.CreatorDataService), i0.ɵɵdirectiveInject(i3.CountryDataService), i0.ɵɵdirectiveInject(i4.ActivatedRoute), i0.ɵɵdirectiveInject(i4.Router));\n  };\n  CreatorEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreatorEditComponent,\n    selectors: [[\"app-creator-edit\"]],\n    decls: 30,\n    vars: 8,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-row\"], [1, \"form-group\", \"col-md-6\"], [\"for\", \"firstname\"], [\"id\", \"firstname\", \"type\", \"text\", \"formControlName\", \"firstName\", 1, \"form-control\"], [\"for\", \"lastname\"], [\"id\", \"lastname\", \"type\", \"text\", \"formControlName\", \"lastName\", 1, \"form-control\"], [\"class\", \"form-text\", 4, \"ngIf\"], [1, \"form-group\", \"col-md-12\"], [\"for\", \"role\"], [\"id\", \"role\", \"formControlName\", \"role\", 1, \"form-control\", \"w-auto\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"contactForm\", 4, \"ngIf\"], [1, \"col-xl-12\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", \"mr-2\", \"mb-2\", 3, \"disabled\"], [1, \"x-spacer\"], [\"type\", \"button\", 1, \"btn\", \"btn-warning\", \"mr-2\", \"mb-2\", 3, \"click\"], [\"type\", \"button\", \"class\", \"btn btn-secondary mr-2 mb-2\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"class\", \"btn btn-outline-danger mr-2 mb-2\", 3, \"click\", 4, \"ngIf\"], [1, \"form-text\"], [3, \"value\"], [3, \"contactForm\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", \"mr-2\", \"mb-2\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-danger\", \"mr-2\", \"mb-2\", 3, \"click\"]],\n    template: function CreatorEditComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function CreatorEditComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(1, \"h5\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1)(4, \"div\", 2)(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Pr\\u00E9nom\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n        i0.ɵɵtext(10, \"Nom\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(12, CreatorEditComponent_span_12_Template, 3, 0, \"span\", 7);\n        i0.ɵɵelementStart(13, \"div\", 1)(14, \"div\", 8)(15, \"label\", 9);\n        i0.ɵɵtext(16, \"R\\u00F4le\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"select\", 10);\n        i0.ɵɵtemplate(18, CreatorEditComponent_option_18_Template, 3, 5, \"option\", 11);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(19, CreatorEditComponent_app_contact_form_19_Template, 1, 1, \"app-contact-form\", 12);\n        i0.ɵɵelementStart(20, \"div\", 1)(21, \"div\", 13)(22, \"button\", 14);\n        i0.ɵɵtext(23, \"Sauvegarder \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(24, \"span\", 15);\n        i0.ɵɵelementStart(25, \"button\", 16);\n        i0.ɵɵlistener(\"click\", function CreatorEditComponent_Template_button_click_25_listener() {\n          return ctx.onCancel();\n        });\n        i0.ɵɵtext(26, \"Annuler \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(27, \"span\", 15);\n        i0.ɵɵtemplate(28, CreatorEditComponent_button_28_Template, 2, 0, \"button\", 17);\n        i0.ɵɵtemplate(29, CreatorEditComponent_button_29_Template, 2, 0, \"button\", 18);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.creatorForm);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.label);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngIf\", !ctx.creatorForm.pristine && (ctx.creatorForm.errors == null ? null : ctx.creatorForm.errors.namesExist));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.rolesList);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasContact);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", !ctx.creatorForm.valid);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", !ctx.hasContact);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasContact);\n      }\n    },\n    dependencies: [i5.NgForOf, i5.NgIf, i6.ɵNgNoValidate, i6.NgSelectOption, i6.ɵNgSelectMultipleOption, i6.DefaultValueAccessor, i6.SelectControlValueAccessor, i6.NgControlStatus, i6.NgControlStatusGroup, i6.FormGroupDirective, i6.FormControlName, i7.ContactFormComponent, i8.EnumToValuePipe]\n  });\n  return CreatorEditComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}