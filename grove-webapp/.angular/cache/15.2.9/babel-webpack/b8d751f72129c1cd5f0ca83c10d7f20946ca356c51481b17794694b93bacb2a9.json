{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { merge, Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../game.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@ng-bootstrap/ng-bootstrap\";\nconst _c0 = [\"instance\"];\nexport let CategoryPickerComponent = /*#__PURE__*/(() => {\n  class CategoryPickerComponent {\n    constructor(service) {\n      this.service = service;\n      this.focus$ = new Subject();\n      this.click$ = new Subject();\n      this.backEvent = new EventEmitter();\n      this.categories = [];\n      this.gameCategories = [];\n      this.gameIds = [];\n      this.availableCategoriesTitle = [];\n      this.search = text$ => {\n        const debouncedText$ = text$.pipe(debounceTime(200), distinctUntilChanged());\n        const clicksWithClosedPopup$ = this.click$.pipe(filter(() => !this.instance.isPopupOpen()));\n        const inputFocus$ = this.focus$;\n        return merge(debouncedText$, inputFocus$, clicksWithClosedPopup$).pipe(map(term => (term === '' ? this.availableCategoriesTitle : this.availableCategoriesTitle.filter(v => v.toLowerCase().indexOf(term.toLowerCase()) > -1)).slice(0, 10)));\n      };\n    }\n    ngOnInit() {\n      this.gameCategories.forEach(c => this.gameIds.push(c.id));\n      this.availableCategories = this.categories.filter(c => !this.gameIds.includes(c.id));\n      this.availableCategories.forEach(c => this.availableCategoriesTitle.push(c.title));\n      this.form = new UntypedFormGroup({\n        'categoryField': new UntypedFormControl('', [Validators.required, this.categoryAvailable.bind(this)])\n      });\n    }\n    onSubmit() {\n      const categoryRetrieved = this.retrieveCategory(this.form.get('categoryField').value);\n      /* this event remove the 'add mode', and triggers the service procedure to attach this category to current game */\n      this.backEvent.emit(categoryRetrieved);\n    }\n    onBack() {\n      this.form.patchValue({\n        categoryField: null\n      });\n      this.backEvent.emit(null);\n    }\n    retrieveCategory(title) {\n      return this.availableCategories.find(c => c.title === title);\n    }\n    categoryAvailable(control) {\n      return !this.availableCategoriesTitle.includes(control.value) ? {\n        'notAvailableCategory': true\n      } : null;\n    }\n  }\n  CategoryPickerComponent.ɵfac = function CategoryPickerComponent_Factory(t) {\n    return new (t || CategoryPickerComponent)(i0.ɵɵdirectiveInject(i1.GameService));\n  };\n  CategoryPickerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CategoryPickerComponent,\n    selectors: [[\"app-category-picker\"]],\n    viewQuery: function CategoryPickerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.instance = _t.first);\n      }\n    },\n    inputs: {\n      categories: \"categories\",\n      gameCategories: \"gameCategories\"\n    },\n    outputs: {\n      backEvent: \"backEvent\"\n    },\n    decls: 10,\n    vars: 3,\n    consts: [[1, \"form-container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"btn-group\"], [\"for\", \"typeahead-focus\"], [\"id\", \"typeahead-focus\", \"type\", \"text\", \"formControlName\", \"categoryField\", 1, \"form-control\", 3, \"ngbTypeahead\", \"focus\", \"click\"], [\"instance\", \"ngbTypeahead\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", \"ml-2\", \"rounded\", 3, \"disabled\"], [\"type\", \"button\", 1, \"btn\", \"btn-warning\", \"ml-2\", \"rounded\", 3, \"click\"]],\n    template: function CategoryPickerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function CategoryPickerComponent_Template_form_ngSubmit_1_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelement(3, \"label\", 3);\n        i0.ɵɵelementStart(4, \"input\", 4, 5);\n        i0.ɵɵlistener(\"focus\", function CategoryPickerComponent_Template_input_focus_4_listener($event) {\n          return ctx.focus$.next($event.target.value);\n        })(\"click\", function CategoryPickerComponent_Template_input_click_4_listener($event) {\n          return ctx.click$.next($event.target.value);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"button\", 6);\n        i0.ɵɵtext(7, \"Associer \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function CategoryPickerComponent_Template_button_click_8_listener() {\n          return ctx.onBack();\n        });\n        i0.ɵɵtext(9, \"Retour \");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngbTypeahead\", ctx.search);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", !ctx.form.valid);\n      }\n    },\n    dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i3.NgbTypeahead],\n    styles: [\".form-container[_ngcontent-%COMP%]{padding:.5em 1.5em}\"]\n  });\n  return CategoryPickerComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}