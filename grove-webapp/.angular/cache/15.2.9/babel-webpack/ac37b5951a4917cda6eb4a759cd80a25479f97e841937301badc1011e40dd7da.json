{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MechanismService = /*#__PURE__*/(() => {\n  class MechanismService {\n    constructor(http) {\n      this.http = http;\n      this.pagedMechanismsChanged = new Subject();\n      this.apiUri = environment.apiUri;\n    }\n    /* ============================================== REST API METHODS =================================================================== */\n    fetchAll() {\n      return this.http.get(this.apiUri + '/admin/mechanisms', {\n        responseType: 'json'\n      });\n    }\n    /* ================================================ OTHER METHODS ==================================================================== */\n    setNames(mechanism) {\n      this.existingMechanisms = mechanism.slice();\n      console.table(this.existingMechanisms);\n    }\n    getExistingMechanisms() {\n      const mechanismAsList = [];\n      this.existingMechanisms.forEach(mechanism => mechanismAsList.push(mechanism.title.toLowerCase().trim()));\n      return mechanismAsList;\n    }\n    setPagedMechanisms(pagedMechanisms) {\n      this.pagedMechanisms = pagedMechanisms;\n      this.pagedMechanismsChanged.next(this.pagedMechanisms);\n    }\n    getMechanisms() {\n      return this.pagedMechanisms.content.slice();\n    }\n    getMechanismById(givenId) {\n      return this.getMechanisms().find(mechanism => mechanism.id === givenId);\n    }\n    updateMechanisms(mechanism) {\n      this.pagedMechanisms.content = this.pagedMechanisms.content.filter(streamedMechanism => mechanism.id !== streamedMechanism.id);\n      this.pagedMechanisms.content.push(mechanism);\n      this.pagedMechanismsChanged.next(this.pagedMechanisms);\n    }\n  }\n  MechanismService.ɵfac = function MechanismService_Factory(t) {\n    return new (t || MechanismService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  MechanismService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MechanismService,\n    factory: MechanismService.ɵfac,\n    providedIn: 'root'\n  });\n  return MechanismService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}