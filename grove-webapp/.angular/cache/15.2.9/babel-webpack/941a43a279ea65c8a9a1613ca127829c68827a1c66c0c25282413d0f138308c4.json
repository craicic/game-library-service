{"ast":null,"code":"import { environment } from '../../../environments/environment';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./mechanism.service\";\nimport * as i3 from \"../configuration/configuration.service\";\nexport let MechanismDataService = /*#__PURE__*/(() => {\n  class MechanismDataService {\n    constructor(http, mechanismsService, configurationService) {\n      this.http = http;\n      this.mechanismsService = mechanismsService;\n      this.configurationService = configurationService;\n      this.apiUri = environment.apiUri;\n    }\n    fetchNames() {\n      return this.http.get(this.apiUri + '/admin/mechanisms', {\n        responseType: 'json'\n      }).pipe(tap(mechanisms => {\n        this.mechanismsService.setNames(mechanisms);\n      }));\n    }\n    fetchMechanisms(page, keyword) {\n      if (!page) {\n        page = 0;\n      }\n      let keywordParam = '';\n      if (keyword) {\n        keywordParam = '&search=' + keyword.toLowerCase();\n      }\n      const size = this.configurationService.getNumberOfElements();\n      const args = '?page=' + page + '&size=' + size + '&sort=title' + keywordParam;\n      return this.http.get(this.apiUri + '/admin/mechanisms/page' + args, {\n        responseType: 'json'\n      }).pipe(tap(pagedMechanisms => {\n        this.mechanismsService.setPagedMechanisms(pagedMechanisms);\n      }));\n    }\n    editMechanism(id, editedMechanism) {\n      return this.http.put(this.apiUri + '/admin/mechanisms/' + id, editedMechanism, {\n        responseType: 'json'\n      });\n    }\n    addMechanism(newMechanism) {\n      return this.http.post(this.apiUri + '/admin/mechanisms', newMechanism, {\n        responseType: 'json'\n      });\n    }\n    removeMechanism(id) {\n      return this.http.delete(this.apiUri + '/admin/mechanisms/' + id);\n    }\n  }\n  MechanismDataService.ɵfac = function MechanismDataService_Factory(t) {\n    return new (t || MechanismDataService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MechanismService), i0.ɵɵinject(i3.ConfigurationService));\n  };\n  MechanismDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MechanismDataService,\n    factory: MechanismDataService.ɵfac,\n    providedIn: 'root'\n  });\n  return MechanismDataService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}