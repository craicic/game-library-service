{"ast":null,"code":"import { BehaviorSubject, Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../configuration/configuration.service\";\nexport let GameService = /*#__PURE__*/(() => {\n  class GameService {\n    constructor(http, config) {\n      this.http = http;\n      this.config = config;\n      this.page = {};\n      this.pageChanged = new Subject();\n      this.detailedGame$ = new BehaviorSubject(null);\n      this.apiUri = environment.apiUri;\n    }\n    /* ============================================== REST API METHODS =================================================================== */\n    /** Get paged overview games */\n    fetchGames(page, keyword) {\n      console.log('Games list was fetched');\n      if (!page) {\n        page = 0;\n      }\n      let keywordParam = '';\n      if (keyword) {\n        keywordParam = '&search=' + keyword.toLowerCase();\n      }\n      const size = this.config.getNumberOfElements();\n      const params = '?page=' + page + '&size=' + size + '&sort=id' + keywordParam;\n      return this.http.get(this.apiUri + '/admin/games/page/overview' + params, {\n        responseType: 'json'\n      }).pipe(tap(pagedGameOverviews => {\n        this.page = pagedGameOverviews;\n      }));\n    }\n    /** Get a game by id */\n    fetchGameById(id) {\n      return this.http.get(this.apiUri + '/admin/games/' + id, {\n        responseType: 'json'\n      }).pipe(tap(game => {\n        console.log('updating games');\n        this.detailedGame$.next(game);\n        this.game = game;\n      }));\n    }\n    deleteThenFetchAll(id) {}\n    /** */\n    fetchTitles() {\n      return this.http.get(this.apiUri + '/admin/games/titles', {\n        responseType: 'json'\n      });\n    }\n    /** Save a new game POST */\n    saveGame(game) {\n      return this.http.post(this.apiUri + '/admin/games/', game, {\n        responseType: 'json'\n      });\n    }\n    /** Edit the game via PUT request */\n    editGame(id, game) {\n      return this.http.put(this.apiUri + '/admin/games/' + id, game, {\n        responseType: 'json'\n      });\n    }\n    /** Attach the category to the game */\n    addCategory(gameId, categoryId) {\n      return this.http.put(this.apiUri + '/admin/games/' + gameId + '/add-category/' + categoryId, null, {\n        responseType: 'json'\n      });\n    }\n    /** Remove the category to the game */\n    unlinkCategory(gameId, categoryId) {\n      return this.http.put(this.apiUri + '/admin/games/' + gameId + '/unlink-category/' + categoryId, {\n        responseType: 'json'\n      });\n    }\n    /** Attach the mechanism to the game */\n    addMechanism(gameId, mechanismId) {\n      return this.http.put(this.apiUri + '/admin/games/' + gameId + '/add-mechanism/' + mechanismId, null, {\n        responseType: 'json'\n      });\n    }\n    /** Remove the mechanism to the game */\n    unlinkMechanism(gameId, mechanismId) {\n      return this.http.put(this.apiUri + '/admin/games/' + gameId + '/unlink-mechanism/' + mechanismId, {\n        responseType: 'json'\n      });\n    }\n    /** Attach the creator to the game */\n    addCreator(gameId, creatorId) {\n      return this.http.put(this.apiUri + '/admin/games/' + gameId + '/add-creator/' + creatorId, null, {\n        responseType: 'json'\n      });\n    }\n    /** Remove the creator to the game */\n    unlinkCreator(gameId, creatorId) {\n      return this.http.put(this.apiUri + '/admin/games/' + gameId + '/unlink-creator/' + creatorId, {\n        responseType: 'json'\n      });\n    }\n    addProductLine(gameId, lineId) {\n      return this.http.put(this.apiUri + '/admin/games/' + gameId + '/add-product-line/' + lineId, null, {\n        responseType: 'json'\n      });\n    }\n    /** Remove the product line to the game */\n    unlinkProductLine(gameId, lineId) {\n      return this.http.put(this.apiUri + '/admin/games/' + gameId + '/unlink-product-line/' + lineId, {\n        responseType: 'json'\n      });\n    }\n    /* ================================================ OTHER METHODS ==================================================================== */\n    /** sets the page to the debut value */\n    initPage() {\n      this.pageChanged.next(this.page);\n    }\n    /** Updates the paged object as well as notifier the Subject a change occurred */\n    updatePage() {\n      this.pageChanged.next(this.page);\n    }\n    /** finds and return the game with the given id */\n    getGameOverviewById(id) {\n      return this.page.content.find(game => game.id === id);\n    }\n    /** finds and return the last stored game */\n    getDetailedGame() {\n      return this.game;\n    }\n    /** Update the behavior subject game */\n    updateDetailedGame(game) {\n      this.detailedGame$.next(game);\n    }\n    /** Get min and max numbers of player then return a string */\n    buildPLayers(min, max) {\n      let str = '...';\n      if (min === 1 && max === 1) {\n        str = 'Jeu solo';\n      }\n      if (max > 1 && max === min) {\n        str = min.toString() + ' joueurs';\n      } else if (max > min) {\n        str = 'De ' + min.toString() + ' à ' + max.toString() + ' joueurs';\n      } else if (max === 0) {\n        str = 'À partir de ' + min.toString() + ' joueur(s)';\n      }\n      return str;\n    }\n    /** Get limit age then return the age range in a string */\n    buildAge(minAge, maxAge, minMonth) {\n      let str = '';\n      if (minAge === 0 && maxAge === 0 && minMonth === 0) {\n        return str;\n      } else if (maxAge === 0) {\n        str = 'À partir de ';\n        if (minAge > 1) {\n          str += minAge.toString() + ' ans.';\n        } else if (minAge === 1) {\n          str += minAge.toString() + ' an.';\n        } else if (minMonth >= 1) {\n          str += minMonth.toString() + ' mois.';\n        }\n        return str;\n      } else if (maxAge > 0) {\n        str = 'De ';\n        if (minAge > 0) {\n          str += minAge.toString() + ' à ' + maxAge.toString() + ' ans.';\n        } else if (minMonth > 0 && maxAge > 1) {\n          str += minMonth.toString() + ' mois à ' + maxAge.toString() + ' ans.';\n        } else if (minMonth > 0 && maxAge === 1) {\n          str += minMonth.toString() + ' mois à ' + maxAge.toString() + ' an.';\n        } else if (minAge === 0 && minMonth === 0) {\n          str = 'Jusqu\\'à ' + maxAge;\n          maxAge === 1 ? str += ' an.' : str += ' ans';\n        }\n      }\n      return str;\n    }\n  }\n  GameService.ɵfac = function GameService_Factory(t) {\n    return new (t || GameService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ConfigurationService));\n  };\n  GameService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GameService,\n    factory: GameService.ɵfac,\n    providedIn: 'root'\n  });\n  return GameService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}