{"ast":null,"code":"import { Mechanism } from '../../../model/mechansim.model';\nimport { UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../mechanism.service\";\nimport * as i2 from \"../mechanism-data.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction MechanismEditComponent_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9)(1, \"span\");\n    i0.ɵɵtext(2, \"Ce m\\u00E9canisme existe d\\u00E9j\\u00E0 en base de donn\\u00E9es\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport let MechanismEditComponent = /*#__PURE__*/(() => {\n  class MechanismEditComponent {\n    constructor(mechanismsService, mechanismsDataService, route, router) {\n      this.mechanismsService = mechanismsService;\n      this.mechanismsDataService = mechanismsDataService;\n      this.route = route;\n      this.router = router;\n    }\n    ngOnInit() {\n      this.subscription = this.route.params.subscribe(params => {\n        const id = 'id';\n        this.id = +params[id];\n        if (params[id]) {\n          this.editMode = true;\n        } else {\n          this.editMode = false;\n        }\n        this.initFrom();\n      });\n    }\n    onSubmit() {\n      const name = 'name';\n      const newMechanism = new Mechanism(this.mechanismForm.value[name]);\n      if (this.editMode) {\n        this.mechanismsDataService.editMechanism(this.id, newMechanism).subscribe(mechanism => {\n          this.mechanismsService.updateMechanisms(mechanism);\n        });\n      } else {\n        this.mechanismsDataService.addMechanism(newMechanism).subscribe(mechanism => {\n          this.mechanismsService.updateMechanisms(mechanism);\n        });\n      }\n      this.onCancel();\n    }\n    onCancel() {\n      this.router.navigate(['../'], {\n        relativeTo: this.route\n      });\n    }\n    initFrom() {\n      let mechanismName = '';\n      if (this.editMode) {\n        const mechanism = this.mechanismsService.getMechanismById(this.id);\n        mechanismName = mechanism.title;\n        this.label = 'Édition du mécanisme \\\"' + mechanismName + '\\\"';\n      } else {\n        this.label = 'Création d\\'un mécanisme';\n      }\n      this.mechanismForm = new UntypedFormGroup({\n        'name': new UntypedFormControl(mechanismName, [Validators.required, Validators.maxLength(50), this.nameAlreadyExists.bind(this)])\n      });\n    }\n    nameAlreadyExists(control) {\n      /* We need spit the case edit mode or not to allow save the current edited name */\n      if (this.mechanismsService.getExistingMechanisms().indexOf(control.value.toLowerCase().trim()) !== -1) {\n        return {\n          'nameAlreadyExists': true\n        };\n      }\n      return null;\n    }\n  }\n  MechanismEditComponent.ɵfac = function MechanismEditComponent_Factory(t) {\n    return new (t || MechanismEditComponent)(i0.ɵɵdirectiveInject(i1.MechanismService), i0.ɵɵdirectiveInject(i2.MechanismDataService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router));\n  };\n  MechanismEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MechanismEditComponent,\n    selectors: [[\"app-mechanism-edit\"]],\n    decls: 14,\n    vars: 4,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"row\"], [1, \"col-xl-12\"], [1, \"form-group\"], [\"for\", \"name\"], [\"id\", \"name\", \"type\", \"text\", \"formControlName\", \"name\", 1, \"form-control\"], [\"class\", \"form-text\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", \"mr-2\", 3, \"disabled\"], [\"type\", \"button\", 1, \"btn\", \"btn-warning\", 3, \"click\"], [1, \"form-text\"]],\n    template: function MechanismEditComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function MechanismEditComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"label\", 4);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"input\", 5);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(7, MechanismEditComponent_span_7_Template, 3, 0, \"span\", 6);\n        i0.ɵɵelementStart(8, \"div\", 1)(9, \"div\", 2)(10, \"button\", 7);\n        i0.ɵɵtext(11, \"Sauvegarder \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function MechanismEditComponent_Template_button_click_12_listener() {\n          return ctx.onCancel();\n        });\n        i0.ɵɵtext(13, \"Annuler \");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.mechanismForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(ctx.label);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.mechanismForm.pristine && ctx.mechanismForm.hasError(\"nameAlreadyExists\", \"name\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", !ctx.mechanismForm.valid);\n      }\n    },\n    dependencies: [i4.NgIf, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormControlName]\n  });\n  return MechanismEditComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}