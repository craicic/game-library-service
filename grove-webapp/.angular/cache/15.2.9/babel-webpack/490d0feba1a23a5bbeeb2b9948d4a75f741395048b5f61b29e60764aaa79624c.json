{"ast":null,"code":"import { environment } from '../../../environments/environment';\nimport { of, Subject } from 'rxjs';\nimport { concatMap, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../configuration/configuration.service\";\nexport let CategoryService = /*#__PURE__*/(() => {\n  class CategoryService {\n    constructor(http, config) {\n      this.http = http;\n      this.config = config;\n      this.pageChanged = new Subject();\n      this.page = {};\n      this.existingTitles = [];\n      this.apiUri = environment.apiUri;\n    }\n    /* ============================================== REST API METHODS =================================================================== */\n    /** Gets all categories */\n    fetchAll() {\n      return this.http.get(this.apiUri + '/admin/categories', {\n        responseType: 'json'\n      });\n    }\n    /** Gets all categories then store them to an array field */\n    fetchAllAndStore() {\n      return this.fetchAll().pipe(tap(categories => {\n        this.categories = categories.slice();\n      }));\n    }\n    /** Removes a category by id */\n    remove(id) {\n      return this.http.delete(this.apiUri + '/admin/categories/' + id);\n    }\n    /** Edits an existing category */\n    edit(id, category) {\n      return this.http.put(this.apiUri + '/admin/categories/' + id, category, {\n        responseType: 'json'\n      }).subscribe(returnedCategory => {\n        const index = this.categories.indexOf(this.getCategoryById(category.id));\n        this.categories.splice(index, 1);\n        this.categories.push(returnedCategory);\n        this.updatePage();\n      });\n    }\n    /** Saves a new category */\n    add(category) {\n      return this.http.post(this.apiUri + '/admin/categories', category, {\n        responseType: 'json'\n      }).subscribe(returnedCategory => {\n        this.categories.push(returnedCategory);\n        this.updatePage();\n      });\n    }\n    /* ================================================ OTHER METHODS ==================================================================== */\n    /** sets the page to the debut value */\n    initPage() {\n      this.page.pageSize = this.config.getNumberOfElements();\n      this.page.pageNumber = 0;\n      this.updatePage();\n    }\n    /** filters the categories list with the given string then updated the page */\n    filter(str) {\n      this.filteredCategories = this.categories.filter(category => category.title.toLowerCase().includes(str.toLocaleLowerCase())).slice();\n      this.page.content = this.filteredCategories.slice();\n      this.pageChanged.next(this.page);\n    }\n    /** Updates the paged object as well as notifier the Subject a change occurred */\n    updatePage() {\n      this.page.content = this.categories.slice();\n      this.pageChanged.next(this.page);\n    }\n    /** finds and return the category with the given id */\n    getCategoryById(id) {\n      return this.page.content.find(category => category.id === id);\n    }\n    /** Uses concatMap to successively remove category, fetch all categories then update the page */\n    deleteThenFetchAll(id) {\n      const myObs = of(id);\n      myObs.pipe(concatMap(categoryId => {\n        return this.remove(categoryId);\n      }), concatMap(() => {\n        return this.fetchAllAndStore();\n      })).subscribe(() => {\n        this.updatePage();\n      });\n    }\n    /** reverses the filtering, set filteredCategories to an empty list */\n    removeFilter() {\n      this.updatePage();\n      this.filteredCategories = [];\n    }\n    /** returns a list of existingTitles (lower case and trim) */\n    getLowerCasedAndTrimmedCategoryTitles() {\n      return this.existingTitles;\n    }\n    /** lower case and trim all categories' title, then store them into a private array */\n    setLowerCasedAndTrimmedCategoryTitles() {\n      const categories = this.page.content.slice();\n      this.existingTitles = [];\n      categories.forEach(category => this.existingTitles.push(category.title.toLowerCase().trim()));\n    }\n  }\n  CategoryService.ɵfac = function CategoryService_Factory(t) {\n    return new (t || CategoryService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ConfigurationService));\n  };\n  CategoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CategoryService,\n    factory: CategoryService.ɵfac,\n    providedIn: 'root'\n  });\n  return CategoryService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}