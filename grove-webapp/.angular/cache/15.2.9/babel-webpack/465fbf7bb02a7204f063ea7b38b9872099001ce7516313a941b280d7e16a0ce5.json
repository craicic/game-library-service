{"ast":null,"code":"import { environment } from '../../../environments/environment';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./publisher.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"../configuration/configuration.service\";\nexport let PublisherDataService = /*#__PURE__*/(() => {\n  class PublisherDataService {\n    constructor(publishersService, http, configurationService) {\n      this.publishersService = publishersService;\n      this.http = http;\n      this.configurationService = configurationService;\n      this.apiUri = environment.apiUri;\n    }\n    fetchNames() {\n      return this.http.get(this.apiUri + '/admin/publishers/names', {\n        responseType: 'json'\n      }).pipe(tap(names => {\n        this.publishersService.setNames(names);\n      }));\n    }\n    fetchPublishers(page, keyword) {\n      if (!page) {\n        page = 0;\n      }\n      let keywordParam = '';\n      if (keyword) {\n        keywordParam = '&search=' + keyword.toLowerCase();\n      }\n      const size = this.configurationService.getNumberOfElements();\n      const params = '?page=' + page + '&size=' + size + '&sort=id' + keywordParam;\n      return this.http.get(this.apiUri + '/admin/publishers/page' + params, {\n        responseType: 'json'\n      }).pipe(tap(pagedPublishers => {\n        this.publishersService.setPagedPublishers(pagedPublishers);\n      }));\n    }\n    removePublisher(id) {\n      return this.http.delete(this.apiUri + '/admin/publishers/' + id);\n    }\n    removeContact(publisherId, contactId) {\n      return this.http.delete(this.apiUri + '/admin/publishers/' + publisherId + '/contact/' + contactId);\n    }\n    editPublisher(id, editedPublisher) {\n      this.http.put(this.apiUri + '/admin/publishers/' + id, editedPublisher, {\n        responseType: 'json'\n      }).subscribe(publisher => this.publishersService.updatePublishers(publisher));\n    }\n    addPublisher(newPublisher, hasContact) {\n      let contactParam = '';\n      if (hasContact) {\n        contactParam = '?has-contact=true';\n      }\n      this.http.post(this.apiUri + '/admin/publishers' + contactParam, newPublisher, {\n        responseType: 'json'\n      }).subscribe(publisher => this.publishersService.updatePublishers(publisher));\n    }\n  }\n  PublisherDataService.ɵfac = function PublisherDataService_Factory(t) {\n    return new (t || PublisherDataService)(i0.ɵɵinject(i1.PublisherService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.ConfigurationService));\n  };\n  PublisherDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PublisherDataService,\n    factory: PublisherDataService.ɵfac,\n    providedIn: 'root'\n  });\n  return PublisherDataService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}